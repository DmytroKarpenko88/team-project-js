{"mappings":"AAqEA,MAAMA,EAAa,ICnEJ,MACbC,cACEC,KAAKC,UAAY,KACjBD,KAAKE,OAAS,KAEdF,KAAKG,WAAWC,MAAK,EAACC,OAAEA,MACtBL,KAAKC,UAAYI,CAAM,IAEzBL,KAAKM,YAAYF,MAAK,EAACG,OAAEA,MACvBP,KAAKE,OAAS,IAAKK,EAAQ,G,CAI/BC,GAAY,+BAEZC,kBAAkBC,GAChB,aAAaC,MAAM,GAAGX,MAAKQ,IAAYE,6CAAyBN,MAAKQ,GACnEA,EAAIC,Q,CAIRC,cAAgBL,MAAOM,EAAO,KAC5B,MAAMH,QAAYZ,KAAKgB,YAAY,0BAA0BD,MAC7D,OAAOf,KAAKiB,oBAAoBL,EAAI,EAEtCM,SAAWT,MAAMU,SACFnB,KAAKgB,YAAY,UAAUG,MAE1CC,YAAcX,MAAMY,SACLrB,KAAKgB,YAAY,uBAAuBK,MAEvDC,WAAab,MAAMU,SACJnB,KAAKgB,YAAY,UAAUG,aAE1CF,oBAAsBL,IAEpB,MAAMG,KAAEA,EAAIQ,cAAEA,EAAaC,QAAEA,GAAYZ,EAEnCa,EAAQF,EAAgBC,EAAQE,OAuBtC,MAAO,C,KACLX,E,WAvBiBU,IAAUE,KAAKC,MAAMH,GAASA,EAAQE,KAAKE,KAAKJ,G,WAEhDD,EAAQM,KAAIC,IAC7BC,QAAQC,IAAIF,GACZ,MAAMG,GAAEA,EAAEC,cAAEA,EAAaC,MAAEA,EAAKC,KAAEA,EAAIC,aAAEA,EAAYC,UAAEA,GAAcR,EAC9D1B,EAASL,KAAKC,UACjBuC,QAAOC,GAAQF,EAAUG,SAASD,EAAS,MAC3CX,KAAIW,GAAQA,EAAW,OACpBE,EAAS,GAAG3C,KAAKE,OAAiB,6BAAsBiC,IAExDS,EAAIN,GAAgB,IAAIO,KAAKA,KAAKC,MAAMR,IAG9C,MAAO,C,GACLJ,E,OACA7B,E,OACAsC,E,QALcL,EAAeM,EAAEG,cAAgB,KAO/CX,MAAOA,GAASC,EACjB,IAOF,EAEHlC,SAAWM,eACIT,KAAKgB,YAAY,sBAEhCV,UAAYG,eACGT,KAAKgB,YAAY,oBDH5BgC,EAAUC,SAASC,cAAc,YAkEvCpD,EACGgB,gBACAV,MAAK+C,IAnEiB1C,OAAM0C,IAC7B,MAAMC,QAA2BC,QAAQC,IACvCH,EACGrB,KAAIrB,MAAM8C,IACT,MAAMrB,GAAEA,EAAEE,MAAEA,EAAKG,UAAEA,EAASD,aAAEA,EAAYH,cAAEA,GAAkBoB,EACxDlD,QAAeP,EAAWK,WAC1BD,QAAeJ,EAAWQ,aAC1BL,UAAEA,GAAcI,GAChBmD,SAAEA,GAAatD,EAAOK,OAE5B,IAAIkD,EAAkB,GAClBxD,IACFwD,EAAkBxD,EACfuC,QAAOC,GAAQF,EAAUG,SAASD,EAAS,MAC3CX,KAAIW,GAAQA,EAAW,OACvBiB,KAAK,OAGV,IAAIC,EAAO,GASX,YAR4B,IAAjBrB,GAAgCA,EAAaZ,OAAS,IAC/DiC,EAAOrB,EAAasB,MAAM,EAAG,IAOxB,oGAEkC1B,WANrBC,EAChB,GAAGqB,sBAA6BrB,IAChC,qEAIsEC,mGAG/CA,yFAEQqB,mDACAE,oEAI/B,IAELD,KAAK,KAEV1B,QAAQC,IAAI,sBAAuBmB,GACnCJ,EAAQa,UAAYT,CAAkB,EAwBpCU,CAAiBX,EAAOY,YACxB/B,QAAQC,IAAIkB,EAAO,IAEpBa,OAAMC,IACLjC,QAAQC,IAAIgC,EAAMC,QAAQ","sources":["src/js/events/renderGalleryCard.js","src/js/services/service-api.js"],"sourcesContent":["// const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n// export function renderMovieCards(movies) {\n//   const gallery = document.querySelector('.gallery');\n//   const movieGalleryMarkup = movies\n//     .map(movie => createMovieMarkup(movie))\n//     .join('');\n//   gallery.innerHTML = movieGalleryMarkup;\n// }\n\n// export function createMovieMarkup(movie) {\n//   const { title, genre_ids, release_date, poster_path, id } = movie;\n\n//   let year = '';\n//   if (typeof release_date !== 'undefined' && release_date.length > 4) {\n//     year = release_date.slice(0, 4);\n//   }\n\n//   // Get a list of movie genres\n//   const movieGenresList = getMovieGenresList(genre_ids).join(', ');\n\n//   if (poster_path === null) {\n//     return `<li>\n//             <a class=\"gallery__link\" href=\"#\">\n//               <img class=\"gallery__image\" data-id=\"${id}\" src=\"https://dummyimage.com/395x574/000/fff.jpg&text=no+poster\" alt=\"${title} movie poster\" loading=\"lazy\">\n\n//             <div class=\"info\">\n//               <p class=\"info__item\">${title}</p>\n//               <div class=\"info-detail\">\n//                 <p class=\"info-detail__item\">${movieGenresList}</p>\n//                 <p class=\"info-detail__item\">${year}</p>\n//               </div>\n//             </div>\n//             </a>\n//           </li>`;\n//   }\n\n//   return `<li>\n//             <a class=\"gallery__link\" href=\"#\">\n//               <img class=\"gallery__image\" data-id=\"${id}\" src=\"${BASE_IMG_URL}${poster_path}\" alt=\"${title} movie poster\" loading=\"lazy\">\n\n//             <div class=\"info\">\n//               <h3 class=\"info__item\">${title}</h3>\n//               <div class=\"info-detail\">\n//                 <p class=\"info-detail__item\">${movieGenresList}</p>\n//                 <p class=\"info-detail__item\">${year}</p>\n//               </div>\n//             </div>\n//             </a>\n//           </li>`;\n// }\n\n// //  Get a list of movie genres by ID\n// export function getMovieGenresList(genresIdsList) {\n//   let movieGenres = genres.reduce((acc, { id, name }) => {\n//     if (genresIdsList.includes(id)) {\n//       acc.push(name);\n//     }\n//     return acc;\n//   }, []);\n//   if (movieGenres.length > 3) {\n//     movieGenres = movieGenres.slice(0, 2);\n//     movieGenres.push('Other');\n//   }\n//   return movieGenres;\n// }\n\nimport ServiceApi from '../services/service-api';\n\nconst serviceApi = new ServiceApi();\nconst gallery = document.querySelector('.gallery');\nconst renderMovieCards = async movies => {\n  const movieGalleryMarkup = await Promise.all(\n    movies\n      .map(async movie => {\n        const { id, title, genre_ids, release_date, backdrop_path } = movie;\n        const genres = await serviceApi.getGenre();\n        const config = await serviceApi.getConfig();\n        const { allGenres } = genres;\n        const { base_url } = config.images;\n\n        let movieGenresList = '';\n        if (allGenres) {\n          movieGenresList = allGenres\n            .filter(item => genre_ids.includes(item['id']))\n            .map(item => item['name'])\n            .join(', ');\n        }\n\n        let year = '';\n        if (typeof release_date !== 'undefined' && release_date.length > 4) {\n          year = release_date.slice(0, 4);\n        }\n\n        const poster_path = backdrop_path\n          ? `${base_url}w440_and_h660_face${backdrop_path}`\n          : 'https://dummyimage.com/395x574/000/fff.jpg&text=no+poster';\n\n        return `<li>\n        <a class=\"gallery__link\" href=\"#\">\n          <img class=\"gallery__image\" data-id=\"${id}\" src=\"${poster_path}\" alt=\"${title} movie poster\" loading=\"lazy\">\n\n        <div class=\"info\">\n          <h3 class=\"info__item\">${title}</h3>\n          <div class=\"info-detail\">\n            <p class=\"info-detail__item\">${movieGenresList}</p>\n            <p class=\"info-detail__item\">${year}</p>\n          </div>\n        </div>\n        </a>\n      </li>`;\n      })\n      .join('')\n  );\n  console.log('movieGalleryMarkup:', movieGalleryMarkup);\n  gallery.innerHTML = movieGalleryMarkup;\n};\n\n// Get a list of movie genres by ID\nexport const getMovieGenresList = async genresIdsList => {\n  const genres = await serviceApi.getGenre();\n  const { allGenres } = genres;\n\n  let movieGenres = allGenres.reduce((acc, { id, name }) => {\n    if (genresIdsList.includes(id)) {\n      acc.push(name);\n    }\n    return acc;\n  }, []);\n  if (movieGenres.length > 3) {\n    movieGenres = movieGenres.slice(0, 2);\n    movieGenres.push('Other');\n  }\n  return movieGenres;\n};\n\nserviceApi\n  .getListMovies()\n  .then(movies => {\n    renderMovieCards(movies.listMovies);\n    console.log(movies);\n  })\n  .catch(error => {\n    console.log(error.message);\n  });\n","const API_KEY = '221af12348c3ca060963c8b12f5995d3';\n\nexport default class ServiceApi {\n  constructor() {\n    this.allGenres = null;\n    this.config = null;\n\n    this.getGenre().then(({ genres }) => {\n      this.allGenres = genres;\n    });\n    this.getConfig().then(({ images }) => {\n      this.config = { ...images };\n    });\n  }\n\n  #BASE_URL = 'https://api.themoviedb.org/3';\n\n  async getResource(url) {\n    return await fetch(`${this.#BASE_URL}${url}api_key=${API_KEY}`).then(res =>\n      res.json()\n    );\n  }\n\n  getListMovies = async (page = 1) => {\n    const res = await this.getResource(`/trending/all/day?page=${page}&`);\n    return this.transformListMovies(res);\n  };\n  getMovie = async movieId => {\n    return await this.getResource(`/movie/${movieId}?`);\n  };\n  searchMovie = async query => {\n    return await this.getResource(`/search/movie?query=${query}&`);\n  };\n  getTrailer = async movieId => {\n    return await this.getResource(`/movie/${movieId}/videos?`);\n  };\n  transformListMovies = res => {\n    // console.log(res);\n    const { page, total_results, results } = res;\n\n    const pages = total_results / results.length;\n    const totalPages = pages === Math.floor(pages) ? pages : Math.ceil(pages);\n\n    const listMovies = results.map(item => {\n      console.log(item);\n      const { id, backdrop_path, title, name, release_date, genre_ids } = item;\n      const genres = this.allGenres\n        .filter(item => genre_ids.includes(item['id']))\n        .map(item => item['name']);\n      const poster = `${this.config['base_url']}w440_and_h660_face${backdrop_path}`;\n\n      const d = release_date && new Date(Date.parse(release_date));\n      const release = release_date ? d.getFullYear() : null;\n\n      return {\n        id,\n        genres,\n        poster,\n        release,\n        title: title || name,\n      };\n    });\n\n    return {\n      page,\n      totalPages,\n      listMovies,\n    };\n  };\n  getGenre = async () => {\n    return await this.getResource(`/genre/movie/list?`);\n  };\n  getConfig = async () => {\n    return await this.getResource(`/configuration?`);\n  };\n}\n"],"names":["$7ab64900740c802f$var$serviceApi","constructor","this","allGenres","config","getGenre","then","genres","getConfig","images","BASE_URL","async","url","fetch","res","json","getListMovies","page","getResource","transformListMovies","getMovie","movieId","searchMovie","query","getTrailer","total_results","results","pages","length","Math","floor","ceil","map","item1","console","log","id","backdrop_path","title","name","release_date","genre_ids","filter","item","includes","poster","d","Date","parse","getFullYear","$7ab64900740c802f$var$gallery","document","querySelector","movies","movieGalleryMarkup","Promise","all","movie","base_url","movieGenresList","join","year","slice","innerHTML","$7ab64900740c802f$var$renderMovieCards","listMovies","catch","error","message"],"version":3,"file":"index.5e3e50e3.js.map"}