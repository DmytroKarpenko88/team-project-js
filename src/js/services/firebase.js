// Import the functions you need from the SDKs you need
import { initializeApp } from 'firebase/app';
import { getAnalytics, logEvent } from 'firebase/analytics';
import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  onAuthStateChanged,
  signOut,
} from 'firebase/auth';
import { getDatabase, ref, set, update, push, child } from 'firebase/database';

// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: 'AIzaSyBfjYCJEdjmn_37sClBe9-UhyujDiKsq3w',
  authDomain: 'movie-team-project.firebaseapp.com',
  projectId: 'movie-team-project',
  storageBucket: 'movie-team-project.appspot.com',
  messagingSenderId: '414127138635',
  appId: '1:414127138635:web:35033aaee0f8eb008ceace',

  databaseURL: 'https://movie-team-project-default-rtdb.firebaseio.com/',
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// This snippet file was generated by processing the source file:
// ./auth-next/email-link-auth.js
//
// To update the snippets in this file, edit the source and then run
// 'npm run snippets'.

// [START auth_email_link_actioncode_settings_modular]
const actionCodeSettings = {
  // URL you want to redirect back to. The domain (www.example.com) for this
  // URL must be in the authorized domains list in the Firebase Console.
  url: 'https://www.example.com/finishSignUp?cartId=1234',
  // This must be true.
  handleCodeInApp: true,
  iOS: {
    bundleId: 'com.example.ios',
  },
  android: {
    packageName: 'com.example.android',
    installApp: true,
    minimumVersion: '12',
  },
  dynamicLinkDomain: 'example.page.link',
};
// [END auth_email_link_actioncode_settings_modular]

// const analytics = getAnalytics(app);
// logEvent(analytics, 'notification_received');

// Initialize Firebase Authentication and get a reference to the service
const auth = getAuth();

export async function registration(email, password, userName) {
  await createUserWithEmailAndPassword(auth, email, password)
    .then(userCredential => {
      // Signed in
      const user = userCredential.user;

      set(ref(database, 'users/' + user.uid), {
        userName: userName,
        email: email,
      });

      console.log('Created user!');
      // ...
    })
    .catch(error => {
      const errorCode = error.code;
      const errorMessage = error.message;
      console.log(errorMessage);
      // ..
    });
}

export async function login(email, password) {
  await signInWithEmailAndPassword(auth, email, password)
    .then(userCredential => {
      // Signed in
      const user = userCredential.user;

      const dt = new Date();

      update(ref(database, 'users/' + user.uid), {
        last_login: dt,
      });

      console.log('User is logged in!');

      // ...
    })
    .catch(error => {
      const errorCode = error.code;
      const errorMessage = error.message;
      console.log(errorMessage);
    });
}

// Initialize Realtime Database and get a reference to the service
const database = getDatabase(app);

// function writeUserData(name, email) {
//   // const userId = auth.currentUser.uid;

//   // Get a key for a new Post.
//   const userId = push(child(ref(database), 'users')).key;

//   set(ref(database, 'users/' + userId), {
//     username: name,
//     email: email,
//   });
// }

const refsForm = {
  form_login: document.querySelector('#login'),
  form_register: document.querySelector('#register'),
  btn_logout: document.querySelector('#logout'),
};

refsForm.form_login.addEventListener('submit', onLogin);
refsForm.form_register.addEventListener('submit', onRegister);
refsForm.btn_logout.addEventListener('click', () => {
  signOut(auth)
    .then(() => {
      console.log('Sign-out successful');
    })
    .catch(error => {
      console.log(error.message);
    });
});

function onLogin(e) {
  e.preventDefault();
  const {
    elements: { logemail, logpass },
  } = e.currentTarget;

  login(logemail.value, logpass.value);
  refsForm.form_login.reset();
}

function onRegister(e) {
  e.preventDefault();
  const {
    elements: { logname, logemail, logpass },
  } = e.currentTarget;
  let email = logemail.value;
  let password = logpass.value;
  let userName = logname.value;
  try {
    registration(email, password, userName);

    console.log('userName:', userName);
  } catch (error) {
    console.log(error.message);
  }
}

const user = auth.currentUser;
onAuthStateChanged(auth, user => {
  if (user) {
    const uid = user.uid;
    console.log('You are already logged in');
  } else {
    console.log('You have to log in first');
  }
});
