// Import the functions you need from the SDKs you need
import { initializeApp } from 'firebase/app';
import { getAnalytics, logEvent } from 'firebase/analytics';
import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
} from 'firebase/auth';
import { getDatabase, ref, set } from 'firebase/database';

// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: 'AIzaSyBfjYCJEdjmn_37sClBe9-UhyujDiKsq3w',
  authDomain: 'movie-team-project.firebaseapp.com',
  projectId: 'movie-team-project',
  storageBucket: 'movie-team-project.appspot.com',
  messagingSenderId: '414127138635',
  appId: '1:414127138635:web:35033aaee0f8eb008ceace',

  databaseURL: 'https://movie-team-project-default-rtdb.firebaseio.com/',
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// This snippet file was generated by processing the source file:
// ./auth-next/email-link-auth.js
//
// To update the snippets in this file, edit the source and then run
// 'npm run snippets'.

// [START auth_email_link_actioncode_settings_modular]
const actionCodeSettings = {
  // URL you want to redirect back to. The domain (www.example.com) for this
  // URL must be in the authorized domains list in the Firebase Console.
  url: 'https://www.example.com/finishSignUp?cartId=1234',
  // This must be true.
  handleCodeInApp: true,
  iOS: {
    bundleId: 'com.example.ios',
  },
  android: {
    packageName: 'com.example.android',
    installApp: true,
    minimumVersion: '12',
  },
  dynamicLinkDomain: 'example.page.link',
};
// [END auth_email_link_actioncode_settings_modular]

// const analytics = getAnalytics(app);
// logEvent(analytics, 'notification_received');

// Initialize Firebase Authentication and get a reference to the service
const auth = getAuth();

let email = 'user@mail.com';
let password = 223456;

// createUser(email, password);
function createUser(email, password) {
  createUserWithEmailAndPassword(auth, email, password)
    .then(userCredential => {
      // Signed in
      const user = userCredential.user;
      // ...
    })
    .catch(error => {
      const errorCode = error.code;
      const errorMessage = error.message;
      // ..
    });
}

signInWithEmailAndPassword(auth, email, password)
  .then(userCredential => {
    // Signed in
    const user = userCredential.user;
    const { uid, email, name } = user;
    console.log(
      'ðŸš€ ~ file: firebase.js:84 ~ uid, email, name:',
      uid,
      email,
      name
    );
    const imageUrl = 'https://filmoteka-team-js-default-rtdb.firebaseio.com/';

    writeUserData(uid, email, { name: 'User' }, imageUrl);

    // ...
  })
  .catch(error => {
    const errorCode = error.code;
    const errorMessage = error.message;
    console.log(error.message);
  });

console.log('Firebase');

// Initialize Realtime Database and get a reference to the service
const database = getDatabase(app);
console.log('ðŸš€ ~ file: firebase.js:95 ~ database:', database);

function writeUserData(userId, name, email, imageUrl) {
  const db = getDatabase();
  console.log('ðŸš€ ~ file: firebase.js:110 ~ writeUserData ~ db:', db);
  set(ref(db, 'users/' + userId), {
    username: name,
    email: email,
    profile_picture: imageUrl,
  });
}

// const db = getDatabase();
// const starCountRef = ref(db, 'posts/' + postId + '/starCount');
// onValue(starCountRef, snapshot => {
//   const data = snapshot.val();
//   updateStarCount(postElement, data);
// });
