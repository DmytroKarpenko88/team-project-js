{"mappings":"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","sources":["src/js/services/service-api.js","src/js/events/renderGalleryCard.js"],"sourcesContent":["const API_KEY = '221af12348c3ca060963c8b12f5995d3';\n\nclass ServiceApi {\n  constructor() {\n    this.getGenre().then(this.setGenres);\n  }\n\n  #BASE_URL = 'https://api.themoviedb.org/3';\n  #BASE_IMG = 'https://image.tmdb.org/t/p/w500';\n\n  async getResource(url) {\n    return await fetch(`${this.#BASE_URL}${url}api_key=${API_KEY}`)\n      .then(res => res.json());\n  }\n\n  /**\n   * Getting list of movies\n   * @param period {string: (\"day\"|\"week\")} - Period to display popular movies\n   * @param page {number} - Number of page of pagination\n   * @returns {Promise<{totalPages: (number|number), page, listMovies: *}>}\n   */\n  getListMovies = async (period, page=1) => {\n    const res = await this.getResource(`/trending/movie/${period}?page=${page}&`);\n    return this.transformListMovies(res);\n  };\n\n  /**\n   * Looking for\n   * @param movieId\n   * @returns {Promise<{overview: string, original_title: *, genres: *, vote_average: *, popularity: *, title: *, vote_count: *, poster_path: string}>}\n   */\n  getMovie = async (movieId) => {\n    const res = await this.getResource(`/movie/${movieId}?`);\n    return await this.transformDataMovie(res);\n  };\n\n  /**\n   * Search a movie from dataBase\n   * @param query {string} - string for search\n   * @returns {Promise<*>}\n   */\n  searchMovie = async (query) => {\n    const res = await this.getResource(`/search/movie?query=${query}&`);\n    return this.transformListMovies(res);\n  };\n\n  getTrailer = async (movieId) => {\n    return await this.getResource(`/movie/${movieId}/videos?`);\n  };\n\n  getByGenres = async (genre) => {\n    const res = await this.getResource(`/movie/${movieId}/videos?`);\n  }\n\n  /* Adding methods */\n  transformListMovies = (res) => {\n    const {page, total_results, results} = res;\n\n    const pages = total_results / results.length;\n    const totalPages = pages === Math.floor(pages) ? pages : Math.ceil(pages);\n\n    const listMovies = results.map(item => {\n      const {id, poster_path, title, name, release_date, genre_ids, overview} = item;\n      const keyGenres = JSON.parse(localStorage.getItem('genres'));\n\n      const genres = Object.entries(keyGenres).filter(item => genre_ids.includes(+item[0])).map(item => item[1]);\n\n      const poster = poster_path ? `${this.#BASE_IMG}${poster_path}` : null;\n\n      const d = release_date && new Date(Date.parse(release_date));\n      const release = release_date ? d.getFullYear() : null;\n\n      return {\n        id,\n        genres,\n        poster,\n        release,\n        title: title || name,\n        overview,\n      }\n    });\n\n    return {\n      page,\n      totalPages,\n      listMovies,\n    };\n  };\n  getGenre = async () => {\n    return await this.getResource(`/genre/movie/list?`);\n  };\n  transformDataMovie = async (res) => {\n    const {\n      title,\n      vote_average,\n      vote_count,\n      popularity,\n      original_title,\n      genres,\n      overview=\"\",\n      poster_path=null\n    } = res;\n\n    return {\n      title,\n      vote_average,\n      vote_count,\n      popularity,\n      original_title,\n      genres: genres.map(item => item['name']),\n      overview,\n      poster_path: `${this.config['base_url']}w440_and_h660_face${poster_path}`,\n    }\n  };\n  setGenres = ({genres}) => {\n    const objGenres = {};\n    genres.forEach(({id, name}) => {\n      objGenres[id] = name;\n    });\n    localStorage.setItem('genres', JSON.stringify(objGenres));\n  };\n}\n\nexport const serviceApi = new ServiceApi();","// const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n// export function renderMovieCards(movies) {\n//   const gallery = document.querySelector('.gallery');\n//   const movieGalleryMarkup = movies\n//     .map(movie => createMovieMarkup(movie))\n//     .join('');\n//   gallery.innerHTML = movieGalleryMarkup;\n// }\n\n// export function createMovieMarkup(movie) {\n//   const { title, genre_ids, release_date, poster_path, id } = movie;\n\n//   let year = '';\n//   if (typeof release_date !== 'undefined' && release_date.length > 4) {\n//     year = release_date.slice(0, 4);\n//   }\n\n//   // Get a list of movie genres\n//   const movieGenresList = getMovieGenresList(genre_ids).join(', ');\n\n//   if (poster_path === null) {\n//     return `<li>\n//             <a class=\"gallery__link\" href=\"#\">\n//               <img class=\"gallery__image\" data-id=\"${id}\" src=\"https://dummyimage.com/395x574/000/fff.jpg&text=no+poster\" alt=\"${title} movie poster\" loading=\"lazy\">\n\n//             <div class=\"info\">\n//               <p class=\"info__item\">${title}</p>\n//               <div class=\"info-detail\">\n//                 <p class=\"info-detail__item\">${movieGenresList}</p>\n//                 <p class=\"info-detail__item\">${year}</p>\n//               </div>\n//             </div>\n//             </a>\n//           </li>`;\n//   }\n\n//   return `<li>\n//             <a class=\"gallery__link\" href=\"#\">\n//               <img class=\"gallery__image\" data-id=\"${id}\" src=\"${BASE_IMG_URL}${poster_path}\" alt=\"${title} movie poster\" loading=\"lazy\">\n\n//             <div class=\"info\">\n//               <h3 class=\"info__item\">${title}</h3>\n//               <div class=\"info-detail\">\n//                 <p class=\"info-detail__item\">${movieGenresList}</p>\n//                 <p class=\"info-detail__item\">${year}</p>\n//               </div>\n//             </div>\n//             </a>\n//           </li>`;\n// }\n\n// //  Get a list of movie genres by ID\n// export function getMovieGenresList(genresIdsList) {\n//   let movieGenres = genres.reduce((acc, { id, name }) => {\n//     if (genresIdsList.includes(id)) {\n//       acc.push(name);\n//     }\n//     return acc;\n//   }, []);\n//   if (movieGenres.length > 3) {\n//     movieGenres = movieGenres.slice(0, 2);\n//     movieGenres.push('Other');\n//   }\n//   return movieGenres;\n// }\n\nimport { serviceApi } from '../services/service-api';\n\nconst gallery = document.querySelector('.gallery');\nconst renderMovieCards = async movies => {\n  const movieGalleryMarkup = await Promise.all(\n    movies\n      .map(async movie => {\n        const { id, title, genre_ids, release_date, backdrop_path } = movie;\n        const genres = await serviceApi.getGenre();\n        const config = await serviceApi.getConfig();\n        const { allGenres } = genres;\n        const { base_url } = config.images;\n\n        let movieGenresList = '';\n        if (allGenres) {\n          movieGenresList = allGenres\n            .filter(item => genre_ids.includes(item['id']))\n            .map(item => item['name'])\n            .join(', ');\n        }\n\n        let year = '';\n        if (typeof release_date !== 'undefined' && release_date.length > 4) {\n          year = release_date.slice(0, 4);\n        }\n\n        const poster_path = backdrop_path\n          ? `${base_url}w440_and_h660_face${backdrop_path}`\n          : 'https://dummyimage.com/395x574/000/fff.jpg&text=no+poster';\n\n        return `<li class=\"gallery__item\">\n        <a class=\"gallery__link\" href=\"#\">\n          <img class=\"gallery__image\" data-id=\"${id}\" src=\"${poster_path}\" alt=\"${title} movie poster\" loading=\"lazy\">\n\n        <div class=\"info\">\n          <h3 class=\"info__item\">${title}</h3>\n          <div class=\"info-detail\">\n            <p class=\"info-detail__item\">${movieGenresList}</p>\n            <p class=\"info-detail__item\">${year}</p>\n          </div>\n        </div>\n        </a>\n      </li>`;\n      })\n      .join('')\n  );\n  console.log('movieGalleryMarkup:', movieGalleryMarkup);\n  gallery.innerHTML = movieGalleryMarkup;\n};\n\n// Get a list of movie genres by ID\nexport const getMovieGenresList = async genresIdsList => {\n  const genres = await serviceApi.getGenre();\n  const { allGenres } = genres;\n\n  let movieGenres = allGenres.reduce((acc, { id, name }) => {\n    if (genresIdsList.includes(id)) {\n      acc.push(name);\n    }\n    return acc;\n  }, []);\n  if (movieGenres.length > 3) {\n    movieGenres = movieGenres.slice(0, 2);\n    movieGenres.push('Other');\n  }\n  return movieGenres;\n};\n\nserviceApi\n  .getListMovies()\n  .then(movies => {\n    renderMovieCards(movies.listMovies);\n    console.log(movies);\n  })\n  .catch(error => {\n    console.log(error.message);\n  });\n"],"names":["$c076777012638691$export$a6d517dace9f2428","constructor","this","getGenre","then","setGenres","BASE_URL","BASE_IMG","async","url","fetch","res","json","getListMovies","period","page","getResource","transformListMovies","getMovie","movieId","transformDataMovie","searchMovie","query","getTrailer","getByGenres","genre","total_results","results","pages","length","Math","floor","ceil","map","item1","id","poster_path","title","name","release_date","genre_ids","overview","keyGenres","JSON","parse","localStorage","getItem","genres","Object","entries","filter","item","includes","poster","d","Date","getFullYear","vote_average","vote_count","popularity","original_title","config","objGenres","forEach","setItem","stringify","$7ab64900740c802f$var$gallery","document","querySelector","movies","movieGalleryMarkup","Promise","all","movie","backdrop_path","getConfig","allGenres","base_url","images","movieGenresList","join","year","slice","console","log","innerHTML","$7ab64900740c802f$var$renderMovieCards","listMovies","catch","error","message"],"version":3,"file":"index.4c15bd2e.js.map"}